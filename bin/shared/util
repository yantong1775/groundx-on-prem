#!/usr/bin/env bash

valid_envs=("aws", "gcp")
recursive_types=("aws", "gcp")

valid_aws=("aws-vpc" "eks")
valid_gcp=("gcp-vpc" "gke")

# valid_groups order is important:
# the groups are executed in order for deploy
# and reverse order for destroy
valid_groups=("init" "services" "app")
recursive_types=("init" "services" "app")

valid_apps=("groundx" "layout-webhook" "pre-process" "process" "queue" "summary-client" "upload" "layout" "summary" "ranker")
valid_init=("add" "config")
valid_services=("cache" "db" "file" "graph" "search" "stream")

# for helm release explicit clean up, in case terraform fails to clean up
golang_apps=("groundx" "layout-webhook" "pre-process" "process" "queue" "summary-client" "upload")
inference_apps=("ranker" "summary")
inference_process_apps=("layout")

deploy() {
  local dir="$1"

  if [[ -d "$dir" ]]; then
    status "\u00b7 Deploying $dir" && echo
    terraform -chdir="$dir" init -upgrade
    terraform -chdir="$dir" plan
    if [[ "$TFLAG" -eq 1 ]]; then
      status "Skipping terraform apply" && ok
    else
      terraform -chdir="$dir" apply --auto-approve
      status "Done" && ok
    fi
  else
    { error "Error: Directory [$dir] does not exist."; exit 1; }
  fi
}

error() {
  [[ "$@" != "" ]] && echo -n "$@ "
  echo -e >&2 "\e[31;1m\u2717\e[0m";
}

must_have() {
    for cmd in $*; do
        command -v $cmd >/dev/null 2>&1 || { error "$cmd command is required but not installed"; exit 1; }
    done
}

ok() {
    [[ "$@" != "" ]] && echo -n "$@ "
    echo -e "\e[32;1m\u2713\e[0m"
}

recurse_directories() {
  local do=$1
  local dir="$2"
  local max_concurrent=$3
  local semaphore=$max_concurrent
  local pids=()

  if [[ -d "$dir" ]]; then
    for sub_dir in "$dir"/*; do
      if [[ -d "$sub_dir" ]]; then
        if [[ $max_concurrent -gt 1 ]]; then
          (
            $do "$sub_dir"
          ) &
          pids+=($!)

          ((semaphore--))

          if [[ $semaphore -eq 0 ]]; then
            wait -n
            ((semaphore++))
          fi
        else
          $do "$sub_dir"
        fi
      fi
    done
    if [[ $max_concurrent -gt 1 ]]; then
      for pid in "${pids[@]}"; do
        wait "$pid" || {
          echo "Error: A process failed for $sub_dir."
          exit 1
        }
      done
    fi
  else
    echo "Error: Directory '$dir' does not exist."
    exit 1
  fi
}

recurse_group() {
  local do=$1
  local dir="$2"
  local max_concurrent=$3
  shift 3
  local valid_subdirs=("$@")
  local semaphore=$max_concurrent
  local pids=()

  if [[ -d "$dir" ]]; then
    for sub_dir in "${valid_subdirs[@]}"; do
      local full_path="$dir/$sub_dir"
      if [[ -d "$full_path" ]]; then
        if [[ $max_concurrent -gt 1 ]]; then
          (
            $do "$full_path"
          ) &
          pids+=($!)

          ((semaphore--))

          if [[ $semaphore -eq 0 ]]; then
            wait -n
            ((semaphore++))
          fi
        else
          $do "$full_path"
        fi
      fi
    done
    if [[ $max_concurrent -gt 1 ]]; then
      for pid in "${pids[@]}"; do
        wait "$pid" || {
          echo "Error: A process failed for $sub_dir."
          exit 1
        }
      done
    fi
  else
    echo "Error: Directory '$dir' does not exist."
    exit 1
  fi
}

recurse_ordered() {
  local do=$1
  shift
  local base="$1"
  shift
  local env="$1"
  shift
  local dirs=("$@")

  for i in "${!dirs[@]}"; do
    dirs[$i]="$base/$env/${dirs[$i]#${env}-}"
  done

  for sub_dir in "${dirs[@]}"; do
    if [[ -d "$sub_dir" ]]; then
      $do "$sub_dir"
    fi
  done
}

status() { echo -ne "\e[37;1m$@: \e[0m"; }

test_aws() {
    aws eks list-clusters > /dev/null 2>&1

    return $?
}

test_gcp() {
    gcloud container clusters list > /dev/null 2>&1
    return $?
}

test_kubernetes_version() {
  local MIN_KUBERNETES_VERSION=$1

  local SERVER_VERSION
  SERVER_VERSION=$(kubectl version --output=json 2>/dev/null | jq -r '.serverVersion.gitVersion' | sed -E 's/^v|-.+//')

  SERVER_VERSION=$(echo "$SERVER_VERSION" | awk -F. '{print $1"."$2}')

  if [[ -z "$SERVER_VERSION" ]]; then
    error "Unable to determine Kubernetes server version. Is 'kubectl' configured correctly?"
    return 1
  fi

  if [[ $(printf '%s\n' "$SERVER_VERSION" "$MIN_KUBERNETES_VERSION" | sort -V | head -n1) == "$MIN_KUBERNETES_VERSION" && "$SERVER_VERSION" != "$MIN_KUBERNETES_VERSION" ]]; then
    return 0
  else
    error "Kubernetes server version ($SERVER_VERSION) does not meet the minimum requirement ($MIN_KUBERNETES_VERSION)"
    return 1
  fi
}

warn() { echo -e "$@ \e[33;1m\u26a0\e[0m"; }