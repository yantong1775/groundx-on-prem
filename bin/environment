#!/usr/bin/env bash

CONCURRENCY=1

BIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "$BIN_DIR/shared/util"

ENV_BASE="$BIN_DIR/../environment"

must_have aws
must_have gcloud
must_have terraform

ENV=""
AWS=""
GCP=""

if [[ "$1" =~ ^- ]]; then
  IN=""
else
  IN=$1
  shift

  if [[ " ${valid_envs[@]} " =~ " $IN " ]]; then
    ENV=$IN
    if [[ "$ENV" == "aws" ]]; then
      test_aws || { error "aws command isn't working (are you authorized?)"; exit 2; }
    elif [[ "$ENV" == "gcp" ]]; then
      test_gcp || { error "gcloud command isn't working (are you authorized?)"; exit 2; }
    fi
  elif [[ " ${valid_aws[@]} " =~ " $IN " ]]; then
    AWS=$IN

    test_aws || { error "aws command isn't working (are you authorized?)"; exit 2; }
  elif [[ " ${valid_gcp[@]} " =~ " $IN " ]]; then
    GCP=$IN

    test_gcp || { error "gcloud command isn't working (are you authorized?)"; exit 2; }
  else
    { error "Unknown request type: [$IN]"; exit 1; }
  fi
fi

CLEAR=0
TFLAG=0

while getopts ":ct" opt; do
  case $opt in
    c)
      CLEAR=1
      ;;
    t)
      TFLAG=1
      ;;
    \?)
      { error "Invalid option: [-$OPTARG]"; exit 1; }
      ;;
    :)
      { error "Option [-$OPTARG] requires an argument."; exit 1; }
      ;;
  esac
done

destroy() {
  local dir="$1"

  if [[ -d "$dir" ]]; then
    status "\u00b7 Destroying $dir" && echo
    if [[ "$TFLAG" -eq 1 ]]; then
      terraform -chdir="$dir" destroy
    else
      terraform -chdir="$dir" destroy --auto-approve
    fi
    status "Done"; ok;
  else
    { error "Error: Directory [$dir] does not exist."; exit 1; }
  fi
}

do=deploy
if [[ "$CLEAR" -eq 1 ]]; then
  do=destroy

  reversed_envs=()
  for (( idx=${#valid_envs[@]}-1 ; idx>=0 ; idx-- )) ; do
      reversed_envs+=("${valid_envs[$idx]}")
  done
  valid_envs=("${reversed_envs[@]}")

  reversed_aws=()
  for (( idx=${#valid_aws[@]}-1 ; idx>=0 ; idx-- )) ; do
      reversed_aws+=("${valid_aws[$idx]}")
  done
  valid_aws=("${reversed_aws[@]}")
fi

if [[ -n "$ENV" ]]; then
  if [[ " ${valid_envs[@]} " =~ " $ENV " ]]; then
    if [[ "$CLEAR" -eq 1 ]]; then
      "$BIN_DIR/operator" "-c"
    fi

    if [[ " ${recursive_types[@]} " =~ " $ENV " ]]; then
      if [[ "$ENV" == "aws" ]]; then
        recurse_ordered $do "$ENV_BASE" "$ENV" "${valid_aws[@]}"
      else
        recurse_directories $do "$ENV_BASE/$ENV" $CONCURRENCY
      fi
    else
      $do "$ENV_BASE/$ENV"
    fi
  else
    { error "Unknown request type: [$ENV]"; exit 1; }
  fi
elif [[ -n "$AWS" ]]; then
  if [[ "$AWS" == "eks" ]]; then
    $do "$ENV_BASE/aws/eks"
  elif [[ "$AWS" == "aws-vpc" ]]; then
    $do "$ENV_BASE/aws/vpc"
  fi
elif [[ -n "$GCP" ]]; then
  if [[ "$GCP" == "gke" ]]; then
    $do "$ENV_BASE/gcp/gke"
  elif [[ "$GCP" == "gcp-vpc" ]]; then
    $do "$ENV_BASE/gcp/vpc"
  fi
fi